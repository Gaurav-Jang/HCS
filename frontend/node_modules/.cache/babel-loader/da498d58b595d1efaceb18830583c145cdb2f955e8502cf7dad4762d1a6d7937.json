{"ast":null,"code":"import axios from \"axios\";\nconst API_BASE_URL = \"http://localhost:5000/api\";\n\n// Create axios instance with default config\nconst api = axios.create({\n  baseURL: API_BASE_URL,\n  headers: {\n    \"Content-Type\": \"application/json\"\n  },\n  withCredentials: true\n});\n\n// Add token to requests if available\napi.interceptors.request.use(config => {\n  const token = localStorage.getItem(\"token\");\n  if (token) {\n    config.headers.Authorization = `Bearer ${token}`;\n  }\n  return config;\n}, error => {\n  return Promise.reject(error);\n});\n\n// Handle response errors\napi.interceptors.response.use(response => response, error => {\n  var _error$response;\n  if (((_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.status) === 401) {\n    // Token expired or invalid\n    localStorage.removeItem(\"token\");\n    localStorage.removeItem(\"user\");\n    window.location.href = \"/login\";\n  }\n  return Promise.reject(error);\n});\nexport const authService = {\n  // Login\n  async login(email, password, userType) {\n    try {\n      const response = await api.post(\"/auth/login\", {\n        email,\n        password,\n        user_type: userType\n      });\n      const {\n        token,\n        user\n      } = response.data;\n      localStorage.setItem(\"token\", token);\n      localStorage.setItem(\"user\", JSON.stringify(user));\n      return {\n        success: true,\n        user,\n        token\n      };\n    } catch (error) {\n      var _error$response2, _error$response2$data;\n      return {\n        success: false,\n        error: ((_error$response2 = error.response) === null || _error$response2 === void 0 ? void 0 : (_error$response2$data = _error$response2.data) === null || _error$response2$data === void 0 ? void 0 : _error$response2$data.error) || \"Login failed\"\n      };\n    }\n  },\n  // Signup (patients only)\n  async signup(userData) {\n    try {\n      const response = await api.post(\"/auth/signup\", userData);\n      return {\n        success: true,\n        data: response.data\n      };\n    } catch (error) {\n      var _error$response3, _error$response3$data;\n      return {\n        success: false,\n        error: ((_error$response3 = error.response) === null || _error$response3 === void 0 ? void 0 : (_error$response3$data = _error$response3.data) === null || _error$response3$data === void 0 ? void 0 : _error$response3$data.error) || \"Signup failed\"\n      };\n    }\n  },\n  // Logout\n  logout() {\n    localStorage.removeItem(\"token\");\n    localStorage.removeItem(\"user\");\n    window.location.href = \"/login\";\n  },\n  // Get current user\n  getCurrentUser() {\n    const userStr = localStorage.getItem(\"user\");\n    return userStr ? JSON.parse(userStr) : null;\n  },\n  // Get token\n  getToken() {\n    return localStorage.getItem(\"token\");\n  },\n  // Check if user is authenticated\n  isAuthenticated() {\n    return !!this.getToken();\n  },\n  // Verify token\n  async verifyToken() {\n    try {\n      const response = await api.post(\"/auth/verify-token\");\n      return {\n        success: true,\n        user: response.data.user\n      };\n    } catch (error) {\n      return {\n        success: false\n      };\n    }\n  }\n};\nexport const adminService = {\n  // Get dashboard stats\n  async getDashboard() {\n    try {\n      const response = await api.get(\"/admin/dashboard\");\n      return {\n        success: true,\n        data: response.data\n      };\n    } catch (error) {\n      var _error$response4, _error$response4$data;\n      return {\n        success: false,\n        error: ((_error$response4 = error.response) === null || _error$response4 === void 0 ? void 0 : (_error$response4$data = _error$response4.data) === null || _error$response4$data === void 0 ? void 0 : _error$response4$data.error) || \"Failed to fetch dashboard data\"\n      };\n    }\n  },\n  // Get all doctors\n  async getDoctors() {\n    try {\n      const response = await api.get(\"/admin/doctors\");\n      return {\n        success: true,\n        data: response.data.doctors\n      };\n    } catch (error) {\n      var _error$response5, _error$response5$data;\n      return {\n        success: false,\n        error: ((_error$response5 = error.response) === null || _error$response5 === void 0 ? void 0 : (_error$response5$data = _error$response5.data) === null || _error$response5$data === void 0 ? void 0 : _error$response5$data.error) || \"Failed to fetch doctors\"\n      };\n    }\n  },\n  // Add doctor\n  async addDoctor(doctorData) {\n    try {\n      const response = await api.post(\"/admin/doctors\", doctorData);\n      return {\n        success: true,\n        data: response.data\n      };\n    } catch (error) {\n      var _error$response6, _error$response6$data;\n      return {\n        success: false,\n        error: ((_error$response6 = error.response) === null || _error$response6 === void 0 ? void 0 : (_error$response6$data = _error$response6.data) === null || _error$response6$data === void 0 ? void 0 : _error$response6$data.error) || \"Failed to add doctor\"\n      };\n    }\n  },\n  // Approve doctor\n  async approveDoctor(doctorId) {\n    try {\n      const response = await api.put(`/admin/doctors/${doctorId}/approve`);\n      return {\n        success: true,\n        data: response.data\n      };\n    } catch (error) {\n      var _error$response7, _error$response7$data;\n      return {\n        success: false,\n        error: ((_error$response7 = error.response) === null || _error$response7 === void 0 ? void 0 : (_error$response7$data = _error$response7.data) === null || _error$response7$data === void 0 ? void 0 : _error$response7$data.error) || \"Failed to approve doctor\"\n      };\n    }\n  },\n  // Get all patients\n  async getPatients() {\n    try {\n      const response = await api.get(\"/admin/patients\");\n      return {\n        success: true,\n        data: response.data.patients\n      };\n    } catch (error) {\n      var _error$response8, _error$response8$data;\n      return {\n        success: false,\n        error: ((_error$response8 = error.response) === null || _error$response8 === void 0 ? void 0 : (_error$response8$data = _error$response8.data) === null || _error$response8$data === void 0 ? void 0 : _error$response8$data.error) || \"Failed to fetch patients\"\n      };\n    }\n  },\n  // Get all appointments\n  async getAppointments() {\n    try {\n      const response = await api.get(\"/admin/appointments\");\n      return {\n        success: true,\n        data: response.data.appointments\n      };\n    } catch (error) {\n      var _error$response9, _error$response9$data;\n      return {\n        success: false,\n        error: ((_error$response9 = error.response) === null || _error$response9 === void 0 ? void 0 : (_error$response9$data = _error$response9.data) === null || _error$response9$data === void 0 ? void 0 : _error$response9$data.error) || \"Failed to fetch appointments\"\n      };\n    }\n  },\n  // Get all predictions\n  async getPredictions() {\n    try {\n      const response = await api.get(\"/admin/predictions\");\n      return {\n        success: true,\n        data: response.data.predictions\n      };\n    } catch (error) {\n      var _error$response0, _error$response0$data;\n      return {\n        success: false,\n        error: ((_error$response0 = error.response) === null || _error$response0 === void 0 ? void 0 : (_error$response0$data = _error$response0.data) === null || _error$response0$data === void 0 ? void 0 : _error$response0$data.error) || \"Failed to fetch predictions\"\n      };\n    }\n  }\n};\nexport const doctorService = {\n  // Get dashboard stats\n  async getDashboard() {\n    try {\n      const response = await api.get(\"/doctor/dashboard\");\n      return {\n        success: true,\n        data: response.data\n      };\n    } catch (error) {\n      var _error$response1, _error$response1$data;\n      return {\n        success: false,\n        error: ((_error$response1 = error.response) === null || _error$response1 === void 0 ? void 0 : (_error$response1$data = _error$response1.data) === null || _error$response1$data === void 0 ? void 0 : _error$response1$data.error) || \"Failed to fetch dashboard data\"\n      };\n    }\n  },\n  // Get appointments\n  async getAppointments() {\n    try {\n      const response = await api.get(\"/doctor/appointments\");\n      return {\n        success: true,\n        data: response.data.appointments\n      };\n    } catch (error) {\n      var _error$response10, _error$response10$dat;\n      return {\n        success: false,\n        error: ((_error$response10 = error.response) === null || _error$response10 === void 0 ? void 0 : (_error$response10$dat = _error$response10.data) === null || _error$response10$dat === void 0 ? void 0 : _error$response10$dat.error) || \"Failed to fetch appointments\"\n      };\n    }\n  },\n  // Approve appointment\n  async approveAppointment(appointmentId, notes = \"\") {\n    try {\n      const response = await api.put(`/doctor/appointments/${appointmentId}/approve`, {\n        notes\n      });\n      return {\n        success: true,\n        data: response.data\n      };\n    } catch (error) {\n      var _error$response11, _error$response11$dat;\n      return {\n        success: false,\n        error: ((_error$response11 = error.response) === null || _error$response11 === void 0 ? void 0 : (_error$response11$dat = _error$response11.data) === null || _error$response11$dat === void 0 ? void 0 : _error$response11$dat.error) || \"Failed to approve appointment\"\n      };\n    }\n  },\n  // Reject appointment\n  async rejectAppointment(appointmentId, notes = \"\") {\n    try {\n      const response = await api.put(`/doctor/appointments/${appointmentId}/reject`, {\n        notes\n      });\n      return {\n        success: true,\n        data: response.data\n      };\n    } catch (error) {\n      var _error$response12, _error$response12$dat;\n      return {\n        success: false,\n        error: ((_error$response12 = error.response) === null || _error$response12 === void 0 ? void 0 : (_error$response12$dat = _error$response12.data) === null || _error$response12$dat === void 0 ? void 0 : _error$response12$dat.error) || \"Failed to reject appointment\"\n      };\n    }\n  },\n  // Complete appointment\n  async completeAppointment(appointmentId, notes = \"\") {\n    try {\n      const response = await api.put(`/doctor/appointments/${appointmentId}/complete`, {\n        notes\n      });\n      return {\n        success: true,\n        data: response.data\n      };\n    } catch (error) {\n      var _error$response13, _error$response13$dat;\n      return {\n        success: false,\n        error: ((_error$response13 = error.response) === null || _error$response13 === void 0 ? void 0 : (_error$response13$dat = _error$response13.data) === null || _error$response13$dat === void 0 ? void 0 : _error$response13$dat.error) || \"Failed to complete appointment\"\n      };\n    }\n  },\n  // Get predictions\n  async getPredictions() {\n    try {\n      const response = await api.get(\"/doctor/predictions\");\n      return {\n        success: true,\n        data: response.data.predictions\n      };\n    } catch (error) {\n      var _error$response14, _error$response14$dat;\n      return {\n        success: false,\n        error: ((_error$response14 = error.response) === null || _error$response14 === void 0 ? void 0 : (_error$response14$dat = _error$response14.data) === null || _error$response14$dat === void 0 ? void 0 : _error$response14$dat.error) || \"Failed to fetch predictions\"\n      };\n    }\n  },\n  // Review prediction\n  async reviewPrediction(predictionId, doctorNotes, finalDiagnosis) {\n    try {\n      const response = await api.put(`/doctor/predictions/${predictionId}/review`, {\n        doctor_notes: doctorNotes,\n        final_diagnosis: finalDiagnosis\n      });\n      return {\n        success: true,\n        data: response.data\n      };\n    } catch (error) {\n      var _error$response15, _error$response15$dat;\n      return {\n        success: false,\n        error: ((_error$response15 = error.response) === null || _error$response15 === void 0 ? void 0 : (_error$response15$dat = _error$response15.data) === null || _error$response15$dat === void 0 ? void 0 : _error$response15$dat.error) || \"Failed to review prediction\"\n      };\n    }\n  }\n};\nexport const patientService = {\n  // Get dashboard stats\n  async getDashboard() {\n    try {\n      const response = await api.get(\"/patient/dashboard\");\n      return {\n        success: true,\n        data: response.data\n      };\n    } catch (error) {\n      var _error$response16, _error$response16$dat;\n      return {\n        success: false,\n        error: ((_error$response16 = error.response) === null || _error$response16 === void 0 ? void 0 : (_error$response16$dat = _error$response16.data) === null || _error$response16$dat === void 0 ? void 0 : _error$response16$dat.error) || \"Failed to fetch dashboard data\"\n      };\n    }\n  },\n  // Get available doctors\n  async getDoctors() {\n    try {\n      const response = await api.get(\"/patient/doctors\");\n      return {\n        success: true,\n        data: response.data.doctors\n      };\n    } catch (error) {\n      var _error$response17, _error$response17$dat;\n      return {\n        success: false,\n        error: ((_error$response17 = error.response) === null || _error$response17 === void 0 ? void 0 : (_error$response17$dat = _error$response17.data) === null || _error$response17$dat === void 0 ? void 0 : _error$response17$dat.error) || \"Failed to fetch doctors\"\n      };\n    }\n  },\n  // Book appointment\n  async bookAppointment(appointmentData) {\n    try {\n      const response = await api.post(\"/patient/appointments\", appointmentData);\n      return {\n        success: true,\n        data: response.data\n      };\n    } catch (error) {\n      var _error$response18, _error$response18$dat;\n      return {\n        success: false,\n        error: ((_error$response18 = error.response) === null || _error$response18 === void 0 ? void 0 : (_error$response18$dat = _error$response18.data) === null || _error$response18$dat === void 0 ? void 0 : _error$response18$dat.error) || \"Failed to book appointment\"\n      };\n    }\n  },\n  // Get appointments\n  async getAppointments() {\n    try {\n      const response = await api.get(\"/patient/appointments\");\n      return {\n        success: true,\n        data: response.data.appointments\n      };\n    } catch (error) {\n      var _error$response19, _error$response19$dat;\n      return {\n        success: false,\n        error: ((_error$response19 = error.response) === null || _error$response19 === void 0 ? void 0 : (_error$response19$dat = _error$response19.data) === null || _error$response19$dat === void 0 ? void 0 : _error$response19$dat.error) || \"Failed to fetch appointments\"\n      };\n    }\n  },\n  // Cancel appointment\n  async cancelAppointment(appointmentId) {\n    try {\n      const response = await api.put(`/patient/appointments/${appointmentId}/cancel`);\n      return {\n        success: true,\n        data: response.data\n      };\n    } catch (error) {\n      var _error$response20, _error$response20$dat;\n      return {\n        success: false,\n        error: ((_error$response20 = error.response) === null || _error$response20 === void 0 ? void 0 : (_error$response20$dat = _error$response20.data) === null || _error$response20$dat === void 0 ? void 0 : _error$response20$dat.error) || \"Failed to cancel appointment\"\n      };\n    }\n  },\n  // Get predictions\n  async getPredictions() {\n    try {\n      const response = await api.get(\"/patient/predictions\");\n      return {\n        success: true,\n        data: response.data.predictions\n      };\n    } catch (error) {\n      var _error$response21, _error$response21$dat;\n      return {\n        success: false,\n        error: ((_error$response21 = error.response) === null || _error$response21 === void 0 ? void 0 : (_error$response21$dat = _error$response21.data) === null || _error$response21$dat === void 0 ? void 0 : _error$response21$dat.error) || \"Failed to fetch predictions\"\n      };\n    }\n  },\n  // Get doctor available slots\n  async getDoctorAvailableSlots(doctorId, date) {\n    try {\n      const response = await api.get(`/patient/doctors/${doctorId}/available-slots?date=${date}`);\n      return {\n        success: true,\n        data: response.data.available_slots\n      };\n    } catch (error) {\n      var _error$response22, _error$response22$dat;\n      return {\n        success: false,\n        error: ((_error$response22 = error.response) === null || _error$response22 === void 0 ? void 0 : (_error$response22$dat = _error$response22.data) === null || _error$response22$dat === void 0 ? void 0 : _error$response22$dat.error) || \"Failed to fetch available slots\"\n      };\n    }\n  }\n};\nexport const mlService = {\n  // Predict brain tumor\n  async predictTumor(formData) {\n    try {\n      const response = await api.post(\"/ml/predict\", formData, {\n        headers: {\n          \"Content-Type\": \"multipart/form-data\"\n        }\n      });\n      return {\n        success: true,\n        data: response.data\n      };\n    } catch (error) {\n      var _error$response23, _error$response23$dat;\n      return {\n        success: false,\n        error: ((_error$response23 = error.response) === null || _error$response23 === void 0 ? void 0 : (_error$response23$dat = _error$response23.data) === null || _error$response23$dat === void 0 ? void 0 : _error$response23$dat.error) || \"Failed to process image\"\n      };\n    }\n  },\n  // Batch predict\n  async batchPredict(formData) {\n    try {\n      const response = await api.post(\"/ml/batch-predict\", formData, {\n        headers: {\n          \"Content-Type\": \"multipart/form-data\"\n        }\n      });\n      return {\n        success: true,\n        data: response.data\n      };\n    } catch (error) {\n      var _error$response24, _error$response24$dat;\n      return {\n        success: false,\n        error: ((_error$response24 = error.response) === null || _error$response24 === void 0 ? void 0 : (_error$response24$dat = _error$response24.data) === null || _error$response24$dat === void 0 ? void 0 : _error$response24$dat.error) || \"Failed to process images\"\n      };\n    }\n  },\n  // Get model info\n  async getModelInfo() {\n    try {\n      const response = await api.get(\"/ml/model-info\");\n      return {\n        success: true,\n        data: response.data.model_info\n      };\n    } catch (error) {\n      var _error$response25, _error$response25$dat;\n      return {\n        success: false,\n        error: ((_error$response25 = error.response) === null || _error$response25 === void 0 ? void 0 : (_error$response25$dat = _error$response25.data) === null || _error$response25$dat === void 0 ? void 0 : _error$response25$dat.error) || \"Failed to fetch model info\"\n      };\n    }\n  },\n  // Get statistics\n  async getStatistics() {\n    try {\n      const response = await api.get(\"/ml/statistics\");\n      return {\n        success: true,\n        data: response.data.statistics\n      };\n    } catch (error) {\n      var _error$response26, _error$response26$dat;\n      return {\n        success: false,\n        error: ((_error$response26 = error.response) === null || _error$response26 === void 0 ? void 0 : (_error$response26$dat = _error$response26.data) === null || _error$response26$dat === void 0 ? void 0 : _error$response26$dat.error) || \"Failed to fetch statistics\"\n      };\n    }\n  }\n};\nexport default api;","map":{"version":3,"names":["axios","API_BASE_URL","api","create","baseURL","headers","withCredentials","interceptors","request","use","config","token","localStorage","getItem","Authorization","error","Promise","reject","response","_error$response","status","removeItem","window","location","href","authService","login","email","password","userType","post","user_type","user","data","setItem","JSON","stringify","success","_error$response2","_error$response2$data","signup","userData","_error$response3","_error$response3$data","logout","getCurrentUser","userStr","parse","getToken","isAuthenticated","verifyToken","adminService","getDashboard","get","_error$response4","_error$response4$data","getDoctors","doctors","_error$response5","_error$response5$data","addDoctor","doctorData","_error$response6","_error$response6$data","approveDoctor","doctorId","put","_error$response7","_error$response7$data","getPatients","patients","_error$response8","_error$response8$data","getAppointments","appointments","_error$response9","_error$response9$data","getPredictions","predictions","_error$response0","_error$response0$data","doctorService","_error$response1","_error$response1$data","_error$response10","_error$response10$dat","approveAppointment","appointmentId","notes","_error$response11","_error$response11$dat","rejectAppointment","_error$response12","_error$response12$dat","completeAppointment","_error$response13","_error$response13$dat","_error$response14","_error$response14$dat","reviewPrediction","predictionId","doctorNotes","finalDiagnosis","doctor_notes","final_diagnosis","_error$response15","_error$response15$dat","patientService","_error$response16","_error$response16$dat","_error$response17","_error$response17$dat","bookAppointment","appointmentData","_error$response18","_error$response18$dat","_error$response19","_error$response19$dat","cancelAppointment","_error$response20","_error$response20$dat","_error$response21","_error$response21$dat","getDoctorAvailableSlots","date","available_slots","_error$response22","_error$response22$dat","mlService","predictTumor","formData","_error$response23","_error$response23$dat","batchPredict","_error$response24","_error$response24$dat","getModelInfo","model_info","_error$response25","_error$response25$dat","getStatistics","statistics","_error$response26","_error$response26$dat"],"sources":["/Users/gauravjangra/Downloads/Group12-main/frontend/src/utils/auth.js"],"sourcesContent":["import axios from \"axios\";\n\nconst API_BASE_URL = \"http://localhost:5000/api\";\n\n// Create axios instance with default config\nconst api = axios.create({\n  baseURL: API_BASE_URL,\n  headers: {\n    \"Content-Type\": \"application/json\",\n  },\n  withCredentials: true,\n});\n\n// Add token to requests if available\napi.interceptors.request.use(\n  (config) => {\n    const token = localStorage.getItem(\"token\");\n    if (token) {\n      config.headers.Authorization = `Bearer ${token}`;\n    }\n    return config;\n  },\n  (error) => {\n    return Promise.reject(error);\n  }\n);\n\n// Handle response errors\napi.interceptors.response.use(\n  (response) => response,\n  (error) => {\n    if (error.response?.status === 401) {\n      // Token expired or invalid\n      localStorage.removeItem(\"token\");\n      localStorage.removeItem(\"user\");\n      window.location.href = \"/login\";\n    }\n    return Promise.reject(error);\n  }\n);\n\nexport const authService = {\n  // Login\n  async login(email, password, userType) {\n    try {\n      const response = await api.post(\"/auth/login\", {\n        email,\n        password,\n        user_type: userType,\n      });\n\n      const { token, user } = response.data;\n      localStorage.setItem(\"token\", token);\n      localStorage.setItem(\"user\", JSON.stringify(user));\n\n      return { success: true, user, token };\n    } catch (error) {\n      return {\n        success: false,\n        error: error.response?.data?.error || \"Login failed\",\n      };\n    }\n  },\n\n  // Signup (patients only)\n  async signup(userData) {\n    try {\n      const response = await api.post(\"/auth/signup\", userData);\n      return { success: true, data: response.data };\n    } catch (error) {\n      return {\n        success: false,\n        error: error.response?.data?.error || \"Signup failed\",\n      };\n    }\n  },\n\n  // Logout\n  logout() {\n    localStorage.removeItem(\"token\");\n    localStorage.removeItem(\"user\");\n    window.location.href = \"/login\";\n  },\n\n  // Get current user\n  getCurrentUser() {\n    const userStr = localStorage.getItem(\"user\");\n    return userStr ? JSON.parse(userStr) : null;\n  },\n\n  // Get token\n  getToken() {\n    return localStorage.getItem(\"token\");\n  },\n\n  // Check if user is authenticated\n  isAuthenticated() {\n    return !!this.getToken();\n  },\n\n  // Verify token\n  async verifyToken() {\n    try {\n      const response = await api.post(\"/auth/verify-token\");\n      return { success: true, user: response.data.user };\n    } catch (error) {\n      return { success: false };\n    }\n  },\n};\n\nexport const adminService = {\n  // Get dashboard stats\n  async getDashboard() {\n    try {\n      const response = await api.get(\"/admin/dashboard\");\n      return { success: true, data: response.data };\n    } catch (error) {\n      return {\n        success: false,\n        error: error.response?.data?.error || \"Failed to fetch dashboard data\",\n      };\n    }\n  },\n\n  // Get all doctors\n  async getDoctors() {\n    try {\n      const response = await api.get(\"/admin/doctors\");\n      return { success: true, data: response.data.doctors };\n    } catch (error) {\n      return {\n        success: false,\n        error: error.response?.data?.error || \"Failed to fetch doctors\",\n      };\n    }\n  },\n\n  // Add doctor\n  async addDoctor(doctorData) {\n    try {\n      const response = await api.post(\"/admin/doctors\", doctorData);\n      return { success: true, data: response.data };\n    } catch (error) {\n      return {\n        success: false,\n        error: error.response?.data?.error || \"Failed to add doctor\",\n      };\n    }\n  },\n\n  // Approve doctor\n  async approveDoctor(doctorId) {\n    try {\n      const response = await api.put(`/admin/doctors/${doctorId}/approve`);\n      return { success: true, data: response.data };\n    } catch (error) {\n      return {\n        success: false,\n        error: error.response?.data?.error || \"Failed to approve doctor\",\n      };\n    }\n  },\n\n  // Get all patients\n  async getPatients() {\n    try {\n      const response = await api.get(\"/admin/patients\");\n      return { success: true, data: response.data.patients };\n    } catch (error) {\n      return {\n        success: false,\n        error: error.response?.data?.error || \"Failed to fetch patients\",\n      };\n    }\n  },\n\n  // Get all appointments\n  async getAppointments() {\n    try {\n      const response = await api.get(\"/admin/appointments\");\n      return { success: true, data: response.data.appointments };\n    } catch (error) {\n      return {\n        success: false,\n        error: error.response?.data?.error || \"Failed to fetch appointments\",\n      };\n    }\n  },\n\n  // Get all predictions\n  async getPredictions() {\n    try {\n      const response = await api.get(\"/admin/predictions\");\n      return { success: true, data: response.data.predictions };\n    } catch (error) {\n      return {\n        success: false,\n        error: error.response?.data?.error || \"Failed to fetch predictions\",\n      };\n    }\n  },\n};\n\nexport const doctorService = {\n  // Get dashboard stats\n  async getDashboard() {\n    try {\n      const response = await api.get(\"/doctor/dashboard\");\n      return { success: true, data: response.data };\n    } catch (error) {\n      return {\n        success: false,\n        error: error.response?.data?.error || \"Failed to fetch dashboard data\",\n      };\n    }\n  },\n\n  // Get appointments\n  async getAppointments() {\n    try {\n      const response = await api.get(\"/doctor/appointments\");\n      return { success: true, data: response.data.appointments };\n    } catch (error) {\n      return {\n        success: false,\n        error: error.response?.data?.error || \"Failed to fetch appointments\",\n      };\n    }\n  },\n\n  // Approve appointment\n  async approveAppointment(appointmentId, notes = \"\") {\n    try {\n      const response = await api.put(\n        `/doctor/appointments/${appointmentId}/approve`,\n        { notes }\n      );\n      return { success: true, data: response.data };\n    } catch (error) {\n      return {\n        success: false,\n        error: error.response?.data?.error || \"Failed to approve appointment\",\n      };\n    }\n  },\n\n  // Reject appointment\n  async rejectAppointment(appointmentId, notes = \"\") {\n    try {\n      const response = await api.put(\n        `/doctor/appointments/${appointmentId}/reject`,\n        { notes }\n      );\n      return { success: true, data: response.data };\n    } catch (error) {\n      return {\n        success: false,\n        error: error.response?.data?.error || \"Failed to reject appointment\",\n      };\n    }\n  },\n\n  // Complete appointment\n  async completeAppointment(appointmentId, notes = \"\") {\n    try {\n      const response = await api.put(\n        `/doctor/appointments/${appointmentId}/complete`,\n        { notes }\n      );\n      return { success: true, data: response.data };\n    } catch (error) {\n      return {\n        success: false,\n        error: error.response?.data?.error || \"Failed to complete appointment\",\n      };\n    }\n  },\n\n  // Get predictions\n  async getPredictions() {\n    try {\n      const response = await api.get(\"/doctor/predictions\");\n      return { success: true, data: response.data.predictions };\n    } catch (error) {\n      return {\n        success: false,\n        error: error.response?.data?.error || \"Failed to fetch predictions\",\n      };\n    }\n  },\n\n  // Review prediction\n  async reviewPrediction(predictionId, doctorNotes, finalDiagnosis) {\n    try {\n      const response = await api.put(\n        `/doctor/predictions/${predictionId}/review`,\n        {\n          doctor_notes: doctorNotes,\n          final_diagnosis: finalDiagnosis,\n        }\n      );\n      return { success: true, data: response.data };\n    } catch (error) {\n      return {\n        success: false,\n        error: error.response?.data?.error || \"Failed to review prediction\",\n      };\n    }\n  },\n};\n\nexport const patientService = {\n  // Get dashboard stats\n  async getDashboard() {\n    try {\n      const response = await api.get(\"/patient/dashboard\");\n      return { success: true, data: response.data };\n    } catch (error) {\n      return {\n        success: false,\n        error: error.response?.data?.error || \"Failed to fetch dashboard data\",\n      };\n    }\n  },\n\n  // Get available doctors\n  async getDoctors() {\n    try {\n      const response = await api.get(\"/patient/doctors\");\n      return { success: true, data: response.data.doctors };\n    } catch (error) {\n      return {\n        success: false,\n        error: error.response?.data?.error || \"Failed to fetch doctors\",\n      };\n    }\n  },\n\n  // Book appointment\n  async bookAppointment(appointmentData) {\n    try {\n      const response = await api.post(\"/patient/appointments\", appointmentData);\n      return { success: true, data: response.data };\n    } catch (error) {\n      return {\n        success: false,\n        error: error.response?.data?.error || \"Failed to book appointment\",\n      };\n    }\n  },\n\n  // Get appointments\n  async getAppointments() {\n    try {\n      const response = await api.get(\"/patient/appointments\");\n      return { success: true, data: response.data.appointments };\n    } catch (error) {\n      return {\n        success: false,\n        error: error.response?.data?.error || \"Failed to fetch appointments\",\n      };\n    }\n  },\n\n  // Cancel appointment\n  async cancelAppointment(appointmentId) {\n    try {\n      const response = await api.put(\n        `/patient/appointments/${appointmentId}/cancel`\n      );\n      return { success: true, data: response.data };\n    } catch (error) {\n      return {\n        success: false,\n        error: error.response?.data?.error || \"Failed to cancel appointment\",\n      };\n    }\n  },\n\n  // Get predictions\n  async getPredictions() {\n    try {\n      const response = await api.get(\"/patient/predictions\");\n      return { success: true, data: response.data.predictions };\n    } catch (error) {\n      return {\n        success: false,\n        error: error.response?.data?.error || \"Failed to fetch predictions\",\n      };\n    }\n  },\n\n  // Get doctor available slots\n  async getDoctorAvailableSlots(doctorId, date) {\n    try {\n      const response = await api.get(\n        `/patient/doctors/${doctorId}/available-slots?date=${date}`\n      );\n      return { success: true, data: response.data.available_slots };\n    } catch (error) {\n      return {\n        success: false,\n        error: error.response?.data?.error || \"Failed to fetch available slots\",\n      };\n    }\n  },\n};\n\nexport const mlService = {\n  // Predict brain tumor\n  async predictTumor(formData) {\n    try {\n      const response = await api.post(\"/ml/predict\", formData, {\n        headers: {\n          \"Content-Type\": \"multipart/form-data\",\n        },\n      });\n      return { success: true, data: response.data };\n    } catch (error) {\n      return {\n        success: false,\n        error: error.response?.data?.error || \"Failed to process image\",\n      };\n    }\n  },\n\n  // Batch predict\n  async batchPredict(formData) {\n    try {\n      const response = await api.post(\"/ml/batch-predict\", formData, {\n        headers: {\n          \"Content-Type\": \"multipart/form-data\",\n        },\n      });\n      return { success: true, data: response.data };\n    } catch (error) {\n      return {\n        success: false,\n        error: error.response?.data?.error || \"Failed to process images\",\n      };\n    }\n  },\n\n  // Get model info\n  async getModelInfo() {\n    try {\n      const response = await api.get(\"/ml/model-info\");\n      return { success: true, data: response.data.model_info };\n    } catch (error) {\n      return {\n        success: false,\n        error: error.response?.data?.error || \"Failed to fetch model info\",\n      };\n    }\n  },\n\n  // Get statistics\n  async getStatistics() {\n    try {\n      const response = await api.get(\"/ml/statistics\");\n      return { success: true, data: response.data.statistics };\n    } catch (error) {\n      return {\n        success: false,\n        error: error.response?.data?.error || \"Failed to fetch statistics\",\n      };\n    }\n  },\n};\n\nexport default api;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}